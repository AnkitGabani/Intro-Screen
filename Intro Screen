
**************************************************************************************************************
UICollectionViewDelegate, UICollectionViewDataSource,UICollectionViewDelegateFlowLayout 

    @IBOutlet weak var pageController: UIPageControl!
    
**************************************************************************************************************
    let sectionInsetsSlider = UIEdgeInsets(top: 0.0,
                                           left: 0.0,
                                           bottom: 0.0,
                                           right: 0.0)
    
    var flowLayoutSlider: UICollectionViewFlowLayout {
        let _flowLayout = UICollectionViewFlowLayout()
        
        let paddingSpace = sectionInsetsSlider.left * (1)
        let availableWidth = view.frame.width - paddingSpace
        let widthPerItem = availableWidth / 1
        
        DispatchQueue.main.async {
            _flowLayout.itemSize = CGSize(width: widthPerItem, height: self.collectionViewItrp.frame.size.height)
            
            _flowLayout.sectionInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
            _flowLayout.scrollDirection = UICollectionView.ScrollDirection.horizontal
            _flowLayout.minimumInteritemSpacing = 0.0
            _flowLayout.minimumLineSpacing = 0
        }
        
        return _flowLayout
    }
    
**************************************************************************************************************    
     collectionViewItrp.delegate = self
        collectionViewItrp.dataSource = self
        
        self.collectionViewItrp.collectionViewLayout = flowLayoutSlider
        
 **************************************************************************************************************       
        
         @IBAction func clickedSkip(_ sender: Any) {
        let loginVc = self.storyboard?.instantiateViewController(withIdentifier: "WelcomeVC") as! WelcomeVC
        UserDefaults.standard.set(true, forKey: "isInstrctionFinish")
        UserDefaults.standard.synchronize()
        self.navigationController?.pushViewController(loginVc, animated: true)
    }
    
    @IBAction func clickedNExt(_ sender: Any) {
        
        let currentPage = pageController.currentPage
        
        if currentPage < 3{
            self.collectionViewItrp.scrollToItem(at: IndexPath.init(item: currentPage+1, section: 0), at: .right, animated: true)
        }
        else{
            let loginVc = self.storyboard?.instantiateViewController(withIdentifier: "WelcomeVC") as! WelcomeVC
            UserDefaults.standard.set(true, forKey: "isInstrctionFinish")
            UserDefaults.standard.synchronize()
            self.navigationController?.pushViewController(loginVc, animated: true)
        }
    }
    
 **************************************************************************************************************   
    
     func scrollViewDidScroll(_ scrollView: UIScrollView) {
        
        let currentPage = scrollView.contentOffset.x / scrollView.frame.size.width;
        pageController.currentPage = Int(currentPage)
        
        if currentPage == 3
        {
            btnNext.setTitle("DONE", for: .normal)
            imgNext.isHidden = true
            btnNeextRightCont.constant = 25
        }
        else
        {
            imgNext.isHidden = false
            btnNext.setTitle("NEXT", for: .normal)
            btnNeextRightCont.constant = 30
        }
    }
    
**************************************************************************************************************   


@IBAction func clickecNext(_ sender: Any)
    {
        let visibleItems: NSArray = self.quoteCollectionView.indexPathsForVisibleItems as NSArray
        let currentItem: IndexPath = visibleItems.object(at: 0) as! IndexPath
        let nextItem: IndexPath = IndexPath(item: currentItem.item + 1, section: 0)
        if nextItem.row < arrQuotes.count {
            self.quoteCollectionView.scrollToItem(at: nextItem, at: .left, animated: true)
            
        }
    }
    
    
    @IBAction func clickedPrevious(_ sender: Any)
    {
        let visibleItems: NSArray = self.quoteCollectionView.indexPathsForVisibleItems as NSArray
        let currentItem: IndexPath = visibleItems.object(at: 0) as! IndexPath
        let nextItem: IndexPath = IndexPath(item: currentItem.item - 1, section: 0)
        if nextItem.row < arrQuotes.count && nextItem.row >= 0{
            self.quoteCollectionView.scrollToItem(at: nextItem, at: .right, animated: true)
            
        }
    }
    
************************************ Timers ********************************
 /**
     Scroll to Next Cell
     */
    @objc func scrollToNextCell(){
        
        if pageController.currentPage == pageController.numberOfPages - 1 {
            pageController.currentPage = 0
        } else {
            pageController.currentPage += 1
        }
        
        scalingCarousel.scrollToItem(at: IndexPath(row: pageController.currentPage, section: 0), at: .right, animated: true)
    }
    
    /**
     Invokes Timer to start Automatic Animation with repeat enabled
     */
    func startTimer() {
        
        let timer =  Timer.scheduledTimer(timeInterval: 3.3, target: self, selector: #selector(self.scrollToNextCell), userInfo: nil, repeats: true)
    }
    
    
    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {

        if collectionView == scalingCarousel {
            self.pageController.currentPage = indexPath.row
        }
        
    }
    ************************************************** NExt Back **********************************************
    
    func scrollToPreviousOrNextCell(direction: String) {
        
        DispatchQueue.global(qos: .background).async {
            
            DispatchQueue.main.async {
                
                let firstIndex = 0
                let lastIndex = (self.arrProductCollections.count) - 1
                
                let visibleIndices = self.scalingCarousel.indexPathsForVisibleItems
                
                let nextIndex = visibleIndices[0].row + 1
                let previousIndex = visibleIndices[0].row - 1
                
                let nextIndexPath: IndexPath = IndexPath.init(item: nextIndex, section: 0)
                let previousIndexPath: IndexPath = IndexPath.init(item: previousIndex, section: 0)
                
                if direction == "Previous" {
                    if previousIndex < firstIndex {
                        
                    } else {
                        self.scalingCarousel.scrollToItem(at: previousIndexPath, at: .centeredHorizontally, animated: true)
                    }
                } else if direction == "Next" {
                    
                    if nextIndex > lastIndex {
                        
                    } else {
                        
                        self.scalingCarousel.scrollToItem(at: nextIndexPath, at: .centeredHorizontally, animated: true)
                    }
                }
            }
        }
    }
    
    
    @IBAction func clickedRightAroow(_ sender: Any) {
        scrollToPreviousOrNextCell(direction: "Next")
    }
    
    @IBAction func clickedLeftArrow(_ sender: Any) {
        scrollToPreviousOrNextCell(direction: "Previous")
    }
    
    
    
    
